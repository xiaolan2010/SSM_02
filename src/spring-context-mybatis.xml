<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
    <description>Spring和Mybatis集成配置</description>
    <!-- ******** 1. 配置数据源 ******** -->
    <!-- <1>.加载配置文件： jdbc.properties-->
    <context:property-placeholder ignore-unresolvable="true" location="classpath:jdbc.properties" />
    
    <!-- <2>.数据源配置：配置Druid连接池-->
    <!-- org.apache.commons.dbcp2.BasicDataSource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  destroy-method="close">
		<!-- 基本配置 -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
    	<property name="username" value="${jdbc.username}" />
    	<property name="password" value="${jdbc.password}" />
    	<!-- 配置监控统计拦截的filters 去掉后监控界面sql无法统计开启web监控、开启sql防火墙 -->
    	<property name="filters" value="${jdbc.filters}" />
    	<!--  配置初始化-->
    	<property name="maxActive" value="${jdbc.maxActive}" />
    	<property name="initialSize" value="${jdbc.initialSize}" />
    	<property name="maxWait" value="${jdbc.maxWait}" />
    	<property name="minIdle" value="${jdbc.minIdle}" />
    	<!-- 其它配置 -->
    	<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
    	<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
   		<property name="validationQuery" value="${jdbc.validationQuery}" />
    	<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
    	<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
    	<property name="testOnReturn" value="${jdbc.testOnReturn}" />  
    	<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
    	<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
    	
	</bean>
	
	<!-- ******** 2. 配置创建SqlSession的工厂  ******** -->
	<!-- 配置SqlSessionFactory，同时指定数据源dataSource -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	     <!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
        <!-- 方式1：配置MyBaties全局配置文件:mybatis-config.xml -->
        <property name="configLocation" value="classpath:sqlMapConfig.xml" />
        <!-- 方式2：扫描entity包 使用别名 同上sqlMapConfig.xml方式配置 -->
        <!-- <property name="typeAliasesPackage" value="com.xl.agile.modules" /> -->
	    <!--  扫描sql配置文件:mapper需要的xml文件,**表示迭代查找,当前项目Mapper.xml与Mapper.java不在同一个包中启用  [如果*Mapper.xml和*Mapper.java dao不在一个包下，启用下面配置；否可以屏蔽下面]-->
		<property name="mapperLocations" value="classpath*:com/xl/agile/modules/sys/mapper/*Mapper.xml"></property>
	</bean>
	
	<!-- ******** 3. 配置mapper扫描器 自动扫描加载Sql映射文件/接口  ******** -->
	<!--  注册Mappe 配置 DAO接口所在包名 自动扫描包（com.xx.xx.dao）-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- basePackage:Dao 映射文件/接口所在的包（自动扫描）如果需要扫描多个包中间用半角逗号隔开-->
		<property name="basePackage" value="com.xl.agile.modules.sys.dao" />
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- ******** 4. 事务管理  ******** -->
    <!-- dataSource:引用上面定义的数据源 -->
<!-- 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		注入数据库连接池
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	
	 <!-- 配置基于注解的声明式事务 -->
    <!-- enables scanning for @Transactional annotations -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
</beans>
